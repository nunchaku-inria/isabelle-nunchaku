Isabelle frontend:

  * show anonymous functions on a per-need basis

  * find out why some "triple_lookup" have swap
    * and make "unreachable" a kind of built-in, so that "The_unsafe" doesn't appear in Isa problems

  * parse anonymous functions (once they are prefixed with $ or something)

  * add syntax for specifying axioms (e.g. for Chris B. and Bruno P. W.)

  * use [code] equations as a fallback rather than real def

  * annotate monotone (stably infinite) uninterpreted types

  * numeric types
    * do something about big 'nat's? cf. 'binary_ints'
    * avoid numerals if possible
  * BNF-style nesting (through functions, mixed FPs, etc.)?

  * "finite": make it possible to find counterexamples for infinite sets!
    (e.g. mset_to_set)

  * nunchaku for proving, with induction and without rec encoding
    * try SMT method automatically with right facts?

  * maybe:
    * regression testing of entire counterexamples (not just status?)
    * skeleton print mode (i.e. print something that can be inserted in theory)


For paper:

  * mention that these are standard (and hence also Henkin) models

  * mention examples where we now get "unsat" instead of unknown,
    e.g. set theory and "a \in b", "b \in a"


Somewhere:

  * encoding of inductive predicates that gives a proof of why something is
    derivable? or just in the printing?

  * a definitional mechanism for nonproductive, non-wellfounded functions
    (for those points where they do terminate) -- encoding using fuel?
    (cf. "while")


Middleware:

  * better cvc4 kill (find out what's wrong in cvc4, also for Sledgehammer)
  * "eval"
  * detect selectors/discriminator specifications ("rec" or "spec") and
    reuse built-in ones when possible? or maybe this is the same as inlining
    once recursion is expressed as a single equation
  * leverage empty sorts?

  * have Nunchaku split disjunctions (also under exists, and implications,
    ...) and produce several CVC4 problems
  * syntax for models
  * specialization
    * also for "spec"? "eps" and "the"
  * simplification (like simplifier, after specialization in the pipeline -- 'rec [wf]' and/or bound)
  * heuristic inlining of definitions
  * (co)inductive predicates
  * quotient types
    * and "inline" trivial quotient types?
  * numeric types
  * BNF-style nesting (through functions, mixed FPs, etc.)?
  * description operators
    * leverage polarities
  * almost true / almost false predicate inference?
    (so that "card" and "finite" work for infinite domains)
  * finitize? (replace interpreted (typically infinite) type whose constructors are not used by
      uninterpreted type, if monotonic)

CVC4

  * syntax for empty sorts
