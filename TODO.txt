Isabelle frontend:

  * parse types in models
  * keep track of "unsat" vs. "unknown" in translation (e.g. for codatatypes represented as
    datatypes, use of unchecked "wf") in frontend's translator

  * cardinality specs

  * use [code] equations as a fallback rather than real def

  * skeleton print mode

  * numeric types
    * do something about big 'nat's? cf. 'binary_ints'
    * avoid numerals if possible
  * BNF-style nesting (through functions, mixed FPs, etc.)?

  * annotate monotone (stably infinite) uninterpreted types

  * "finite": make it possible to find counterexamples for infinite sets!
    (e.g. mset_to_set)

  * nunchaku for proving, with induction and without rec encoding

Middleware:

  * better cvc4 kill (find out what's wrong in cvc4, also for Sledgehammer)
  * "eval"
  * detect selectors/discriminator specifications ("rec" or "spec") and
    reuse built-in ones when possible? or maybe this is the same as inlining
    once recursion is expressed as a single equation
  * leverage empty sorts?

  * have Nunchaku split disjunctions (also under exists, and implications,
    ...) and produce several CVC4 problems
  * syntax for models
  * specialization
    * also for "spec"? "eps" and "the"
  * simplification (like simplifier, after specialization in the pipeline -- 'rec [wf]' and/or bound)
  * heuristic inlining of definitions
  * (co)inductive predicates
  * quotient types
    * and "inline" trivial quotient types?
  * numeric types
  * BNF-style nesting (through functions, mixed FPs, etc.)?
  * description operators
    * leverage polarities
  * almost true / almost false predicate inference?
    (so that "card" and "finite" work for infinite domains)
  * finitize? (replace interpreted (typically infinite) type whose constructors are not used by
      uninterpreted type, if monotonic)

CVC4

  * syntax for empty sorts
